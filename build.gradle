plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'io.freefair.lombok' version '9.0.0'
    id 'io.qameta.allure' version '3.0.0'
    id 'com.diffplug.spotless' version '6.22.0'
}

group = 'org.example'
version = '1.0-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

ext {
    lombokVersion = '1.18.40'
    restAssuredVersion = '5.5.6'
    datafakerVersion = '2.4.4'
    jacksonVersion = '2.20.0'
    aspectJVersion = '1.9.22.1'
    allureVersion = '2.26.0'
    googleJavaFormatVersion = '1.30.0'
}

// Define configuration for AspectJ agent
configurations {
    agent {
        canBeResolved = true
        canBeConsumed = true
    }
}

dependencies {
    // JUnit 5
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'org.junit.jupiter:junit-jupiter-params'

    // Spring Boot Starter Test
    implementation 'org.springframework.boot:spring-boot-starter-test'

    // Lombok
    implementation "org.projectlombok:lombok:${lombokVersion}"

    // POJO and Faker
    implementation "net.datafaker:datafaker:${datafakerVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"

    // REST-assured and AssertJ
    implementation "io.rest-assured:rest-assured:${restAssuredVersion}"

    // Allure dependencies
    implementation "io.qameta.allure:allure-junit5:${allureVersion}"
    implementation "io.qameta.allure:allure-rest-assured:${allureVersion}"
    agent "org.aspectj:aspectjweaver:${aspectJVersion}"

    // code style
    implementation "com.google.googlejavaformat:google-java-format:${googleJavaFormatVersion}"
}

tasks.withType(Test).configureEach {
    useJUnitPlatform {
        if (project.hasProperty('includeTags')) {
            includeTags project.getProperty('includeTags').split(',')
        }
        if (project.hasProperty('excludeTags')) {
            excludeTags project.getProperty('excludeTags').split(',')
        }
    }
}

// Spotless code formatting configuration
spotless {
    java {
        target 'src/**/*.java'
        googleJavaFormat("${googleJavaFormatVersion}")
    }
}

// optional: make CI/build fail on unformatted code
check.dependsOn tasks.named('spotlessCheck')

// optional: auto-apply formatting before compilation
tasks.named('compileJava') {
    dependsOn tasks.named('spotlessApply')
}

test {
    useJUnitPlatform()
    // Configure javaagent for test execution
    jvmArgs = ["-javaagent:${configurations.agent.singleFile}"]
}

// disabled boot jar, the project is automation project instead of spring boot application
bootJar {
    enabled = false
}
jar {
    enabled = true
}
